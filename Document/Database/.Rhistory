# imp_crediteval	  Probability of paying off full balance every month
# imp_cscore      	Imputed credit score
# pref_cust_prob	  Probability of being a preferred customer
# card_offer	      1=card offered, 0=card not offered
# RiskScore	        Risk of default score (lower=better)
#### DATA EXPLORATION ####
# for(i in 1:4) {
#   print(nrow(
#     eval(
#       parse(text=paste("ds", i, sep=""))
#     )))
# }
#
# eval(parse(text=paste(
#   "df$", x, sep=""
#   )))
# head(eval(parse(text=paste("ds1"))))
nrow(ds1)
nrow(ds2)
nrow(ds3)
nrow(ds4)
# check for missing values
anyNA(ds1)
anyNA(ds2)
anyNA(ds3)
# check for duplicates within each ds
check_dup(ds1)
check_dup(ds2)
check_dup(ds3)
### check for common customer_id's between ds1, ds2, ds3
compare_ds(ds1, ds2)
compare_ds(ds1, ds3)
compare_ds(ds2, ds3)
ds1_v_ds2 <- merge(ds1, ds2,by="customer_id")
ds1_SAME_ds2 <- ds1[ds1$customer_id %in% ds1_v_ds2$customer_id,]
ds4____d1_SAME_ds2 <- ds4[ds4$customer_id %in% ds1_SAME_ds2$customer_id,]
ds1_v_ds3 <- merge(ds1, ds3,by="customer_id")
ds3_SAME_ds1 <- ds3[ds3$customer_id %in% ds1_v_ds3$customer_id,]
nrow(ds3_SAME_ds1)
head(sort(ds1_SAME_ds3$customer_id))
ds4____d1_SAME_ds3 <- ds4[ds4$customer_id %in% ds1_SAME_ds3$customer_id,]
ds2_v_ds3 <- merge(ds2, ds3,by="customer_id")
ds2_SAME_ds3 <- ds2[ds2$customer_id %in% ds2_v_ds3$customer_id,]
ds3_SAME_ds2 <- ds3[ds3$customer_id %in% ds2_v_ds3$customer_id,]
ds2_v_ds3_find_diff_rows <- merge(ds2_SAME_ds3, ds3_SAME_ds2,by=names(ds1))
ds4____d2_SAME_ds3 <- ds4[ds4$customer_id %in% ds2_SAME_ds3$customer_id,]
anyDuplicated(ds1$customer_id)
anyDup_d1 <- duplicated(ds1$customer_id)
sort(ds1[which(anyDup_d1),]$customer_id)
View(ds1[ds1$customer_id==998468,])
View(ds1[ds1$customer_id==22454,])
source('~/.active-rstudio-document', echo=TRUE)
count(ds1[which(anyDup_d1),]$customer_id)
length((ds1[which(anyDup_d1),]$customer_id))
View(ds1[ds1$customer_id==450265,])
for (i in sort(ds1[which(anyDup_d1),]$customer_id)) {
print(nrow(
ds1[ds1$customer_id==i,]
))
}
anyDuplicated(ds1$customer_id)
View(ds1[ds1$customer_id==15817,])
ds1[(ds1$customer_id==15817),][est_income==max(est_income)]
ds1[(ds1$customer_id==15817),]
a <- ds1[(ds1$customer_id==15817),]
a[a$est_income==max(a$est_income)]
a[a$est_income==max(a$est_income),]
a <- ds1[(ds1$customer_id==15817),]
View(a)
ds1_keep_row <- c()
# check if the number of duplicates for each customer_id was greater than 2
for (i in sort(ds1[which(anyDup_d1),]$customer_id)) {
#   print(nrow(
#     ds1[ds1$customer_id==i,]
#     ))
dup_row <- ds1[(ds1$customer_id==i),]
max_dup_row <- dup_rows[dup_rows$est_income==max(dup_rows$est_income),]
ds1_keep_row <- rbind(ds1_keep_row, max_dup_row)
}
ds1_keep_row <- c()
# check if the number of duplicates for each customer_id was greater than 2
for (i in sort(ds1[which(anyDup_d1),]$customer_id)) {
#   print(nrow(
#     ds1[ds1$customer_id==i,]
#     ))
dup_row <- ds1[(ds1$customer_id==i),]
max_dup_row <- dup_rows[dup_row$est_income==max(dup_row$est_income),]
ds1_keep_row <- rbind(ds1_keep_row, max_dup_row)
}
ds1_keep_row <- c()
# check if the number of duplicates for each customer_id was greater than 2
for (i in sort(ds1[which(anyDup_d1),]$customer_id)) {
#   print(nrow(
#     ds1[ds1$customer_id==i,]
#     ))
dup_row <- ds1[(ds1$customer_id==i),]
max_dup_row <- dup_row[dup_row$est_income==max(dup_row$est_income),]
ds1_keep_row <- rbind(ds1_keep_row, max_dup_row)
}
View(ds1_keep_row)
View(ds1_keep_row)
View(ds1_keep_row)
ds1_ds2 <- rbind(ds1, ds2)
ds1-3   <- rbind(ds1_ds2, ds3)
ds1_ds3   <- rbind(ds1_ds2, ds3)
rm(ds1_ds3)
ds1_ds2_ds3   <- rbind(ds1_ds2, ds3)
total_ds_max_rule <- c()
for (i in sort(unique(ds1_ds2_ds3$customer_id))) {
#   print(nrow(
#     ds1[ds1$customer_id==i,]
#     ))
dup_row <- ds1_ds2_ds3[(ds1_ds2_ds3$customer_id==i),]
max_dup_row <- dup_row[dup_row$est_income==max(dup_row$est_income),]
total_ds_max_rule <- rbind(total_ds_max_rule, max_dup_row)
}
for (i in unique(ds1_ds2_ds3$customer_id)) {
#   print(nrow(
#     ds1[ds1$customer_id==i,]
#     ))
dup_row <- ds1_ds2_ds3[(ds1_ds2_ds3$customer_id==i),]
max_dup_row <- dup_row[dup_row$est_income==max(dup_row$est_income),]
total_ds_max_rule <- rbind(total_ds_max_rule, max_dup_row)
}
ds1_unique <- ds1[!duplicated(ds1)]
ds1_unique <- ds1[!duplicated(ds1),]
ds1_one_dup_row <- c()
for (i in sort(ds1[which(anyDup_d1),]$customer_id)) {
#   print(nrow(
#     ds1[ds1$customer_id==i,]
#     ))
dup_row <- ds1[(ds1$customer_id==i),]
max_dup_row <- dup_row[dup_row$est_income==max(dup_row$est_income),]
ds1_one_dup_row <- rbind(ds1_one_dup_row, max_dup_row)
}
ds1_unique_full <- rbind(ds1_unique, ds1_one_dup_row)
rm(anyDup_d1)
d1_unique <- d1[!duplicated(d1$customerid),]
check_dup <- function(ds) {
# check for duplicates
anyDuplicated(ds$customer_id)
anyDup <- duplicated(ds$customer_id)
# View(ds1[which(anyDup_d1),])
dup_ind <-sort(ds[which(anyDup),]$customer_id)
dup_cnt <- length((ds[which(anyDup),]$customer_id))
# [[1]] = dup_ind, [[2]] = dup_cnt
return(list(dup_ind=dup_ind, dup_cnt=dup_cnt))
}
create_unique_full_ds <- function(d1) {
d1_unique <- d1[!duplicated(d1$customerid),]
d1_dup <- d1[duplicated(d1$customerid)]
d1_one_dup_row <- c()
for (i in sort(d1[which(d1_dup),]$customer_id)) {
#   print(nrow(
#     ds1[ds1$customer_id==i,]
#     ))
dup_row <- d1[(d1$customer_id==i),]
max_dup_row <- dup_row[dup_row$est_income==max(dup_row$est_income),]
d1_one_dup_row <- rbind(d1_one_dup_row, max_dup_row)
} # -> there were no more than 2 duplicates for each customer_id
ds1_unique_full <- rbind(ds1_unique, ds1_one_dup_row)
return(list(ds_unique_full=d1_unique_full))
}
create_unique_full_ds(ds1)
create_unique_full_ds <- function(d1) {
d1_unique <- d1[!duplicated(d1$customerid),]
d1_dup <- duplicated(d1$customerid)
d1_one_dup_row <- c()
for (i in sort(d1[which(d1_dup),]$customer_id)) {
#   print(nrow(
#     ds1[ds1$customer_id==i,]
#     ))
dup_row <- d1[(d1$customer_id==i),]
max_dup_row <- dup_row[dup_row$est_income==max(dup_row$est_income),]
d1_one_dup_row <- rbind(d1_one_dup_row, max_dup_row)
} # -> there were no more than 2 duplicates for each customer_id
ds1_unique_full <- rbind(ds1_unique, ds1_one_dup_row)
return(list(ds_unique_full=d1_unique_full))
}
create_unique_full_ds(ds1)
create_unique_full_ds <- function(d1) {
d1_unique <- d1[!duplicated(d1$customerid),]
d1_dup <- duplicated(d1$customerid)
d1_one_dup_row <- c()
for (i in sort(d1[which(d1_dup),]$customer_id)) {
#   print(nrow(
#     ds1[ds1$customer_id==i,]
#     ))
dup_row <- d1[(d1$customer_id==i),]
max_dup_row <- dup_row[dup_row$est_income==max(dup_row$est_income),]
d1_one_dup_row <- rbind(d1_one_dup_row, max_dup_row)
} # -> there were no more than 2 duplicates for each customer_id
d1_unique_full <- rbind(d1_unique, d1_one_dup_row)
return(list(ds_unique_full=d1_unique_full))
}
create_unique_full_ds(ds1)
ds1_unique <- ds1[!duplicated(ds1$customerid),]
nrow(ds1_unique)
ds1_unique <- ds1[!duplicated(ds1$customerid),]
nrow(ds1)
nrow(ds1$customerid)
create_unique_full_ds <- function(d1) {
d1_unique <- d1[!duplicated(d1$customer_id),]
d1_dup <- duplicated(d1$customer_id)
d1_one_dup_row <- c()
for (i in sort(d1[which(d1_dup),]$customer_id)) {
#   print(nrow(
#     ds1[ds1$customer_id==i,]
#     ))
dup_row <- d1[(d1$customer_id==i),]
max_dup_row <- dup_row[dup_row$est_income==max(dup_row$est_income),]
d1_one_dup_row <- rbind(d1_one_dup_row, max_dup_row)
} # -> there were no more than 2 duplicates for each customer_id
d1_unique_full <- rbind(d1_unique, d1_one_dup_row)
return(list(ds_unique_full=d1_unique_full))
}
create_unique_full_ds(ds1)
nrow(create_unique_full_ds(ds1)$ds_unique_full)
ds1_unique <- ds1[!duplicated(ds1$customer_id),]
nrow(ds1_unique)
d1_dup <- duplicated(d1$customer_id)
ds1_dup <- duplicated(ds1$customer_id)
nrow(ds1_dup)
anyDup_d1 <- duplicated(ds1$customer_id)
nrow(anyDup_d1)
View(ds1_dup)
View(ds1[which(ds1_dup)==T])
View(ds1[(ds1_dup)==T])
View(ds1[ds1_dup==T])
View(ds1[ds1_dup==T,])
View(ds1[ds1_dup==T,]$customer_id)
check_dup <- function(ds) {
# check for duplicates
anyDuplicated(ds$customer_id)
anyDup <- duplicated(ds$customer_id)
# View(ds1[which(anyDup_d1),])
dup_ind <-sort(ds[which(anyDup),]$customer_id)
dup_cnt <- length((ds[which(anyDup),]$customer_id))
# [[1]] = dup_ind, [[2]] = dup_cnt
return(list(dup_ind=dup_ind, dup_cnt=dup_cnt))
}
ds1_unique <- ds1[!duplicated(ds1$customer_id),]
create_unique_full_ds <- function(d1) {
d1_unique <- d1[!duplicated(d1$customer_id),]
d1_dup <- duplicated(d1$customer_id)
#   View(ds1[ds1_dup==T,]$customer_id)
d1_one_dup_row <- c()
for (i in unique(d1[d1_dup==T,]$customer_id)) {
#   print(nrow(
#     ds1[ds1$customer_id==i,]
#     ))
dup_row <- d1[(d1$customer_id==i),]
max_dup_row <- dup_row[dup_row$est_income==max(dup_row$est_income),]
d1_one_dup_row <- rbind(d1_one_dup_row, max_dup_row)
} # -> there were no more than 2 duplicates for each customer_id
d1_unique_full <- rbind(d1_unique, d1_one_dup_row)
return(list(ds_unique_full=d1_unique_full))
}
nrow(create_unique_full_ds(ds1)$ds_unique_full)
d1_dup <- duplicated(d1$customer_id)
ds1_one_dup_row <- c()
for (i in unique(ds1[ds1_dup==T,]$customer_id)) {
#   print(nrow(
#     ds1[ds1$customer_id==i,]
#     ))
dup_row <- ds1[(ds1$customer_id==i),]
max_dup_row <- dup_row[dup_row$est_income==max(dup_row$est_income),]
ds1_one_dup_row <- rbind(ds1_one_dup_row, max_dup_row)
}
nrow(ds1_one_dup_row)
View(ds1_one_dup_row)
View(sort(ds1_one_dup_row$customer_id))
nrow(ds1_unique)
ds1_unique <- ds1[!duplicated(ds1$customer_id),]
nrow(ds1_unique)
ds1_unique <- ds1[!duplicated(ds1$customer_id, incomparables=T),]
nrow(ds1_unique)
ds1_unique <- ds1[unique(ds1$customer_id)]
ds1_unique <- ds1[unique(ds1$customer_id),]
nrow(ds1_unique)
nrow(ds1_one_dup_row)
View(ds1_one_dup_row)
View(sort(ds1_one_dup_row$customer_id))
anyDup_d1 <- duplicated(ds1$customer_id)
for (i in sort(ds1[which(anyDup_d1),]$customer_id)) {
#   print(nrow(
#     ds1[ds1$customer_id==i,]
#     ))
dup_row <- ds1[(ds1$customer_id==i),]
max_dup_row <- dup_row[dup_row$est_income==max(dup_row$est_income),]
ds1_keep_row <- rbind(ds1_keep_row, max_dup_row)
}
View(ds1_keep_row)
View(ds1_keep_row$customer_id)
dup_row <- ds1[(ds1$customer_id==15817),]
max_dup_row <- dup_row[dup_row$est_income==max(dup_row$est_income),]
nrow(max_dup_row)
ds1_keep_row <- c()
# check if the number of duplicates for each customer_id was greater than 2
for (i in unique(sort(ds1[which(anyDup_d1),]$customer_id))) {
#   print(nrow(
#     ds1[ds1$customer_id==i,]
#     ))
dup_row <- ds1[(ds1$customer_id==i),]
max_dup_row <- dup_row[dup_row$est_income==max(dup_row$est_income),]
ds1_keep_row <- rbind(ds1_keep_row, max_dup_row)
}
View(ds1_keep_row$customer_id)
View(ds1[which(anyDup_d1),]$customer_id)
head(duplicated(ds1$customer_id))
ds1_dup_customer_id <- ds1[duplicated(ds1$customer_id),]$customer_id
head(ds1_dup_customer_id)
ds1[!ds1$customerid %in% ds1_dup_customer_id]
ds1[!ds1$customerid %in% ds1_dup_customer_id,]
head(duplicated(ds1$customer_id))
head(which(duplicated(ds1$customer_id)==T))
head(ds1[-(which(duplicated(ds1$customer_id)==T))])
nrow(ds1[-(which(duplicated(ds1$customer_id)==T))])
a <- ds1[-(which(duplicated(ds1$customer_id)==T))]
rm(a)
ds1_unique <- ds1[!duplicated(ds1$customer_id),]
nrow(ds1_unique)
a = c(1,2,3,4,1)
unique(a)
duplicated(a)
unique(a, fromLast=T)
unique(a, incomparables=T)
unique(a, margin=1)
head(which(duplicated(ds1$customer_id)==T))
head(duplicated(ds1$consumer_id))
duplicated(ds1$consumer_id)
ds1[duplicated(ds1$consumer_id),]
head(ds1[duplicated(ds1$customer_id),])
duplicated(ds$customer_id)
duplicated(ds1$customer_id)
ds1[duplicated(ds1$customer_id),]$customer_id
ds1_dup_id <- ds1[duplicated(ds1$customer_id),]$customer_id
head(ds1[!(ds1$customer_id %in% ds1_dup_id)])
head(ds1[!(ds1$customer_id %in% ds1_dup_id),])
nrow(ds1[!(ds1$customer_id %in% ds1_dup_id),])
create_unique_full_ds <- function(d1) {
d1_dup <- duplicated(d1$customer_id)
d1_dup_id <- d1[duplicated(d1$customer_id),]$customer_id
d1_unique <- (d1[!(d1$customer_id %in% d1_dup_id),]) # 9892
#   ds1_dup_id <- ds1[duplicated(ds1$customer_id),]$customer_id
#   ds1_unique <- (ds1[!(ds1$customer_id %in% ds1_dup_id),]) # 9892
#
#   View(ds1[ds1_dup==T,]$customer_id)
d1_one_dup_row <- c()
for (i in unique(d1[d1_dup==T,]$customer_id)) {
#   print(nrow(
#     ds1[ds1$customer_id==i,]
#     ))
dup_row <- d1[(d1$customer_id==i),]
max_dup_row <- dup_row[dup_row$est_income==max(dup_row$est_income),]
d1_one_dup_row <- rbind(d1_one_dup_row, max_dup_row)
} # -> there were no more than 2 duplicates for each customer_id
d1_unique_full <- rbind(d1_unique, d1_one_dup_row)
return(list(ds_unique_full=d1_unique_full))
}
nrow(create_unique_full_ds(ds1)$ds_unique_full)
ds1_unique_full <- create_unique_full_ds(ds1)
nrow(create_unique_full_ds(ds1)$ds_unique_full)
ds2_unique_full <- create_unique_full_ds(ds2)
nrow(create_unique_full_ds(ds2)$ds_unique_full)
ds3_unique_full <- create_unique_full_ds(ds3)
nrow(create_unique_full_ds(ds3)$ds_unique_full)
check_dup(ds1)
check_dup(ds3)
compare_ds(ds1, ds2)
ds1_wo_ds3 <- ds1[!ds1$customer_id %in% ds1_SAME_ds3$customer_id,] #ds1 w/o ds3
ds2_wo_ds3 <- ds2[!ds2$customer_id %in% ds2_SAME_ds3$customer_id,] #ds2 w/o ds3
union_ds3_ds2 <- rbind(ds3, ds2_wo_ds3])
union_ds3_ds2 <- rbind(ds3, ds2_wo_ds3)
ds1_wo_ds3 <- ds1[!ds1$customer_id %in% ds1_SAME_ds3$customer_id,] #ds1 w/o ds3
setwd("~/Google Drive/CS 673/CS473-673 Project Shareables/Database")
SourceData <- read.csv(file="PlantSourceData.txt", header=T)
attach(SourceData)
View(SourceData)
myvars <- names(SourceData) %in% c("Synonym.Symbol", "Image.Gallery", "Characteristics.Data")
SourceData_modified <- SourceData[!myvars]
detach(SourceData)
# rename variables
names(SourceData_modified)
names(SourceData_modified)[names(SourceData_modified)=="Accepted.Symbol"] <- "plant_id"
names(SourceData_modified)[names(SourceData_modified)=="Scientific.Name"] <- "name"
names(SourceData_modified)[names(SourceData_modified)=="State.and.Province"] <- "us_state"
names(SourceData_modified)[names(SourceData_modified)=="Category"] <- "pattern"
names(SourceData_modified)[names(SourceData_modified)=="Growth.Habit"] <- "type"
names(SourceData_modified)[names(SourceData_modified)=="Flower.Color"] <- "color_flower"
names(SourceData_modified)[names(SourceData_modified)=="Foliage.Color"] <- "color_foliage"
names(SourceData_modified)[names(SourceData_modified)=="Fruit.Color"] <- "color_fruit"
names(SourceData_modified)[names(SourceData_modified)=="Foliage.Texture"] <- "texture_foliage"
names(SourceData_modified)[names(SourceData_modified)=="Shape.and.Orientation"] <- "shape"
myvars <- c("plant_id", "us_state")
TABLE_locations <- SourceData_modified[myvars]
attach(TABLE_locations)
states = c("AK", "AL", "AZ", "AR", "CA", "CO", "CT", "DE", "FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY", "AS", "DC", "FM", "GU", "MH", "MP", "PW", "PR", "VI")
Sys.time()
for (i in 1:nrow(TABLE_locations)){
for (j in states) {
if (grepl(j, TABLE_locations[i,"us_state"])) TABLE_locations[i, paste0(j)] <- 1
else TABLE_locations[i, paste0(j)] <- 0
}
}
Sys.time()
library(tidyr)
# reshape from wide to long ds
sapply(TABLE_locations, class)
TABLE_locations_long <- gather(TABLE_locations, state, present, AK:VI)
TABLE_locations_long <- TABLE_locations_long[TABLE_locations_long$present==1,]
TABLE_locations_long[["us_state"]] <- NULL
TABLE_locations_long[["present"]] <- NULL
detach(TABLE_locations)
# indicate if a plant is a certain plant type with dummy vars
# "plant_type" table
# select variables
myvars <- c("plant_id", "type")
TABLE_plant_type <- SourceData_modified[myvars]
attach(TABLE_plant_type)
plant_type= c("Forb/herb", "Graminoid", "Lichenous", "Nonvascular", "Shrub", "Subshrub", "Tree", "Vine")
# takes 3 minutes to run
Sys.time()
for (i in 1:nrow(TABLE_plant_type)){
for (j in plant_type) {
if (grepl(j, TABLE_plant_type[i,"type"])) TABLE_plant_type[i, paste0(j)] <- 1
else TABLE_plant_type[i, paste0(j)] <- 0
}
}
Sys.time()
# reshape from wide to long ds
sapply(TABLE_plant_type, class)
# rename "forb/herb" column before reshaping from wide to long
names(TABLE_plant_type)[names(TABLE_plant_type)=="Forb/herb"] <- "Forb_herb"
TABLE_plant_type_long <- gather(TABLE_plant_type, type1, present, Forb_herb:Vine)
View(TABLE_plant_type_long)
sapply(TABLE_plant_type_long, class)
TABLE_plant_type_long <- TABLE_plant_type_long[TABLE_plant_type_long$present==1,]
levels(TABLE_plant_type_long$type1)
levels(TABLE_plant_type_long$type1)[levels(TABLE_plant_type_long$type1)=="Forb_herb"] <- "Forb/herb"
names(TABLE_plant_type_long)[names(TABLE_plant_type_long)=="type1"] <- "type"
TABLE_locations_long[["type"]] <- NULL
TABLE_locations_long[["present"]] <- NULL
detach(TABLE_plant_type)
# "plant" table
# exclude variables: us_state, type
myvars <- names(SourceData_modified) %in% c("us_state", "type")
TABLE_plant <- SourceData_modified[!myvars]
View(TABLE_plant_type)
View(TABLE_plant_type_long)
TABLE_locations_long[["type"]] <- NULL
View(TABLE_locations_long)
View(TABLE_locations)
View(TABLE_plant_type)
View(TABLE_plant_type_long)
names(TABLE_plant_type_long)[names(TABLE_plant_type_long)=="type"] <- "type1"
View(TABLE_plant_type_long)
TABLE_plant_type_long <- TABLE_plant_type_long[TABLE_plant_type_long$present==1,]
levels(TABLE_plant_type_long$type1)
levels(TABLE_plant_type_long$type1)[levels(TABLE_plant_type_long$type1)=="Forb_herb"] <- "Forb/herb"
View(TABLE_plant_type_long)
TABLE_plant_type_long <- gather(TABLE_plant_type, type1, present, Forb_herb:Vine)
sapply(TABLE_plant_type_long, class)
TABLE_plant_type_long <- TABLE_plant_type_long[TABLE_plant_type_long$present==1,]
levels(TABLE_plant_type_long$type1)
View(TABLE_plant_type_long)
TABLE_locations_long[["type"]] <- NULL
View(TABLE_plant_type_long)
View(TABLE_plant_type_long)
TABLE_locations_long$type <- NULL
TABLE_locations_long[["present"]] <- NULL
View(TABLE_plant_type_long)
myvars <- names(TABLE_locations_long) %in% c("type")
TABLE_locations_long <- TABLE_locations_long[!myvars]
View(TABLE_plant_type_long)
View(TABLE_plant_type)
View(TABLE_locations_long)
TABLE_plant_type_long <- gather(TABLE_plant_type, type1, present, Forb_herb:Vine)
View(SourceData)
View(TABLE_plant_type_long)
View(TABLE_plant_type_long)
View(TABLE_plant_type_long)
TABLE_plant_type_long <- subset(TABLE_plant_type_long, select=-type)
View(TABLE_plant_type_long)
View(TABLE_plant_type_long)
View(TABLE_plant_type_long)
TABLE_plant_type_long <- gather(TABLE_plant_type, type1, present, Forb_herb:Vine)
sapply(TABLE_plant_type_long, class)
TABLE_plant_type_long <- TABLE_plant_type_long[TABLE_plant_type_long$present==1,]
levels(TABLE_plant_type_long$type1)
levels(TABLE_plant_type_long$type1)[levels(TABLE_plant_type_long$type1)=="Forb_herb"] <- "Forb/herb"
TABLE_plant_type_long <- subset(TABLE_plant_type_long, select=-type -present)
TABLE_plant_type_long <- subset(TABLE_plant_type_long, select=-type -present)
TABLE_plant_type_long <- subset(TABLE_plant_type_long, select=(-type -present))
View(TABLE_plant_type_long)
TABLE_plant_type_long <- subset(TABLE_plant_type_long, select=-type)
TABLE_plant_type_long <- subset(TABLE_plant_type_long, select=-present)
View(TABLE_plant_type_long)
names(TABLE_plant_type_long)[names(TABLE_plant_type_long)=="type"] <- "type1"
names(TABLE_plant_type_long)[names(TABLE_plant_type_long)=="type1"] <- "type"
View(TABLE_plant_type_long)
detach(TABLE_plant_type)
myvars <- names(SourceData_modified) %in% c("us_state", "type")
TABLE_plant <- SourceData_modified[!myvars]
write.table(SourceData_modified, "~/Google Drive/CS 673/CS473-673 Project Shareables/Database/SourceData_modified.csv", sep=",")
write.table(TABLE_locations_long, "~/Google Drive/CS 673/CS473-673 Project Shareables/Database/TABLE_location.csv", sep=",")
write.table(TABLE_plant_type_long, "~/Google Drive/CS 673/CS473-673 Project Shareables/Database/TABLE_plant_type.csv", sep=",")
write.table(TABLE_plant, "~/Google Drive/CS 673/CS473-673 Project Shareables/Database/TABLE_plant.csv", sep=",")
write.table(SourceData_modified, "~/Google Drive/CS 673/CS473-673 Project Shareables/Database/SourceData_modified.txt", sep=",")
write.table(TABLE_locations_long, "~/Google Drive/CS 673/CS473-673 Project Shareables/Database/TABLE_location.txt", sep=",")
write.table(TABLE_plant_type_long, "~/Google Drive/CS 673/CS473-673 Project Shareables/Database/TABLE_plant_type.txt", sep=",")
write.table(TABLE_plant, "~/Google Drive/CS 673/CS473-673 Project Shareables/Database/TABLE_plant.txt", sep=",")
